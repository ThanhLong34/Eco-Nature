const $ = document.querySelector.bind(document), $$ = document.querySelectorAll.bind(document), myWeb = $("#website"), pathSource = "./resources/data/source.txt", myRequest = new Request(pathSource); function CircleProgress(e, t, o) { this.itemNode = document.querySelector(e), this.percentNode = this.itemNode.querySelector("#statistical__itemPercent"), this.progressNode = this.itemNode.querySelector("#statistical__itemCircle"), this.ms = t, this.maxPercent = o } function circleProgressLoader(e) { const t = Math.floor(e.ms / e.maxPercent); let o = 0; const s = window.getComputedStyle(e.progressNode).getPropertyValue("stroke-dashoffset"), i = Math.floor(parseInt(s) * (100 - e.maxPercent) / 100); e.progressNode.animate({ strokeDashoffset: `${i}` }, { duration: e.ms, fill: "forwards", easing: "linear" }), setInterval(() => { o === e.maxPercent ? clearInterval() : (o++, e.percentNode.innerText = o + "%") }, t) } function initWebsite() { (function () { const e = $("#headerStart"), t = $("#headerInnerView"), o = $("#website__outerView-backToTop"), s = $$(".slider__item").length, i = $("#slider__buttonNext"), n = $("#slider__buttonPrev"); let l, r, c = $(".slider__item.active"), a = !1; const d = $("#posts__listOuter"), h = $("#posts__list"), u = $(".posts__item"); let m, p, _, f, g = !1, v = !1, w = !1; const y = $("#posts__prevButton"), P = $("#posts__nextButton"), T = window.getComputedStyle(h).getPropertyValue("grid-column-gap"), k = parseInt(T), x = $$(".posts__itemHeartIcon"), B = $("#imageViewport__closeButton"), C = $("#imageViewport__fullscreenButton"), S = $("#imageViewport"), N = $("#imageViewport__overlay"), b = $("#imageViewport__inner"), I = $("#imageViewport__imageNode"), L = $$(".projects__itemSearch"), A = $("#imageViewport__imageNode"), R = $$(".posts__itemSearch"), q = new CircleProgress("#statistical__item-0", 1600, 86), V = new CircleProgress("#statistical__item-1", 1600, 71), E = new CircleProgress("#statistical__item-2", 1600, 78), W = new CircleProgress("#statistical__item-3", 1600, 82), j = $("#statistical"); let F = !1; const H = $("#scrollToAbout"), M = $("#scrollToProjects"), D = $("#scrollToMission"), Y = $("#scrollToPosts"), O = $("#scrollToShop"), U = $("#scrollToContacts"), X = $("#about"), Z = $("#projects"), z = $("#mission"), G = $("#posts"), J = $("#shop"), K = $("#contacts"), Q = $("#headerResponsive__expandButton"), ee = $("#headerResponsive__above"), te = $("#headerResponsive__expandButtonIcon"); let oe = !1; const se = $("#headerResponsive__navigationButton"), ie = $("#headerResponsive__navigationList"); let ne = !1; const le = $$(".headerResponsive__navigationItem"); let re = $(".headerResponsive__navigationItem.active"); const ce = $("#posts__prevButtonResponsive"), ae = $("#posts__nextButtonResponsive"), de = $(".posts__item").clientWidth; return { handleBackToTopButton() { (window.scrollY || document.documentElement.scrollTop) > 300 ? o.classList.remove("hidden") : o.classList.add("hidden") }, handleHeaderWhenScroll() { const o = window.scrollY || document.documentElement.scrollTop; o > 2 * t.clientHeight ? e.style.padding = "13px 0" : 0 === o && (e.style.padding = null) }, handleChangeSlider() { c.style.animation = "hiddenAnimate ease 1s forwards", setTimeout(() => { c.classList.remove("active"), c.style.animation = null }, 1e3) }, handleSliderNext(e) { this.handleChangeSlider(); const t = $(`.slider__item-${e}`); t && (t.classList.add("active"), setTimeout(() => { c = t }, 1e3)) }, handleSliderPrev(e) { this.handleChangeSlider(); const t = $(`.slider__item-${e}`); t && (t.classList.add("active"), setTimeout(() => { c = t }, 1e3)) }, handleClickPrevButton_Slider() { if (!a) { a = !0; let e = +c.dataset.sliderindex - 1; e < 0 && (e = s - 1), this.handleSliderPrev(e), setTimeout(() => { a = !1 }, 1e3) } }, handleClickNextButton_Slider() { if (!a) { a = !0; let e = +c.dataset.sliderindex + 1; e >= s && (e = 0), this.handleSliderNext(e), setTimeout(() => { a = !1 }, 1e3) } }, autoClickNextButton_Slider() { l = setInterval(() => { this.handleClickNextButton_Slider() }, 5e3) }, refreshAutoChange_Slider() { clearInterval(l), this.autoClickNextButton_Slider() }, handleOnMouseUpWindow_Posts() { g = !1, allowDrag_Posts = !1, v ? (v = !1, h.style.left = "0px") : w && (w = !1, h.style.left = `-${f - _}px`) }, checkBoundary_Posts() { const e = d.getBoundingClientRect(), t = h.getBoundingClientRect(); parseInt(h.style.left) > 0 ? v = !0 : t.right < e.right && (w = !0), _ = e.width, f = t.width }, autoClickNextButton_Posts() { r = setInterval(() => { this.handleNextButton_Posts() }, 5e3) }, refreshAutoChange_Posts() { clearInterval(r), this.autoClickNextButton_Posts() }, handlePrevButton_Posts() { h.style.left || (h.style.left = 0); const e = parseInt(h.style.left) + (u.offsetWidth + k); this.checkBoundary_Posts(); const t = -(f - _); h.style.left = e > 0 ? e === -t ? `${t}px` : "0px" : `${e}px` }, handleNextButton_Posts() { h.style.left || (h.style.left = 0); const e = parseInt(h.style.left) - (u.offsetWidth + k); this.checkBoundary_Posts(); const t = -(f - _); h.style.left = e < t ? e === 2 * t ? "0px" : `${t}px` : `${e}px` }, handleEventAuto() { this.autoClickNextButton_Slider(), this.autoClickNextButton_Posts() }, createIndexItem_Projects() { L.forEach((e, t) => { e.onclick = (() => { S.classList.remove("hidden"), A.src = `./resources/images/view-image/projects/projects-${t}.jpg` }) }) }, createIndexItem_Posts() { R.forEach((e, t) => { e.onclick = (() => { S.classList.remove("hidden"), A.src = `./resources/images/view-image/posts/posts-${t}.jpg` }) }) }, closeImageViewport() { S.animate({ opacity: "0" }, { duration: 300, easing: "ease" }), setTimeout(() => { S.classList.add("hidden") }, 300) }, playCircleProgress() { setTimeout(() => { circleProgressLoader(q), setTimeout(() => { circleProgressLoader(V), setTimeout(() => { circleProgressLoader(E), setTimeout(() => { circleProgressLoader(W) }, 1400) }, 1400) }, 1400) }) }, handleLoadStatisticalProgress() { F || (window.scrollY > j.offsetTop || document.documentElement.scrollTop > j.offsetTop) && (this.playCircleProgress(), F = !0) }, handleActiveNavigator(e, t, o) { const s = window.scrollY || document.documentElement.scrollTop; (s >= t.offsetTop + 52 || s >= t.offsetTop + 52) && (s < o.offsetTop + 52 || s < o.offsetTop + 52) ? (e.style.backgroundColor = "var(--primary-color)", e.style.color = "white") : (e.style.backgroundColor = null, e.style.color = null) }, handleEvent() { window.onscroll = (() => { this.handleHeaderWhenScroll(), this.handleBackToTopButton(), this.handleLoadStatisticalProgress(), this.handleActiveNavigator(H, X, Z), this.handleActiveNavigator(M, Z, z), this.handleActiveNavigator(D, z, G), this.handleActiveNavigator(Y, G, J), this.handleActiveNavigator(O, J, K); const e = { offsetTop: document.body.offsetHeight }; this.handleActiveNavigator(U, K, e) }), window.onmouseup = (() => { this.handleOnMouseUpWindow_Posts() }), n.onclick = (() => { this.refreshAutoChange_Slider(), this.handleClickPrevButton_Slider() }), i.onclick = (() => { this.refreshAutoChange_Slider(), this.handleClickNextButton_Slider() }), d.onmousedown = (e => { e.preventDefault(), g = !0, m = e.offsetX - h.offsetLeft, d.style.cursor = "grabbing" }), d.onmouseenter = (() => { d.style.cursor = "grab" }), d.onmouseup = (() => { d.style.cursor = "grab" }), d.onmousemove = (e => { e.preventDefault(), g && (p = e.offsetX, h.style.left = `${p - m}px`, this.checkBoundary_Posts()) }), y.onclick = (() => { this.refreshAutoChange_Posts(), this.handlePrevButton_Posts() }), P.onclick = (() => { this.refreshAutoChange_Posts(), this.handleNextButton_Posts() }), x.forEach(e => { e.onclick = function () { this.style.color = "var(--primary-color)" } }), B.onclick = (() => { this.closeImageViewport() }), N.onclick = (() => { this.closeImageViewport() }), b.onclick = (e => { e.stopPropagation() }), C.onclick = function () { I.requestFullscreen ? I.requestFullscreen() : I.webkitRequestFullscreen ? I.webkitRequestFullscreen() : I.msRequestFullscreen && I.msRequestFullscreen() }, H.onclick = function () { window.scrollTo({ top: X.offsetTop + 52, left: 0, behavior: "smooth" }) }, M.onclick = function () { window.scrollTo({ top: Z.offsetTop + 52, left: 0, behavior: "smooth" }) }, D.onclick = function () { window.scrollTo({ top: z.offsetTop + 52, left: 0, behavior: "smooth" }) }, Y.onclick = function () { window.scrollTo({ top: G.offsetTop + 52, left: 0, behavior: "smooth" }) }, O.onclick = function () { window.scrollTo({ top: J.offsetTop + 52, left: 0, behavior: "smooth" }) }, U.onclick = function () { window.scrollTo({ top: K.offsetTop + 52, left: 0, behavior: "smooth" }) }, Q.onclick = function () { oe ? (oe = !1, ee.style.marginTop = null, te.style.transform = null) : (oe = !0, ee.style.marginTop = "unset", te.style.transform = "rotateZ(0deg)") }, se.onclick = function () { ie.classList.toggle("hidden", ne), ne = !ne }, le.forEach(e => { e.onclick = function () { re.classList.remove("active"), e.classList.add("active"), re = e } }), ce.onclick = function () { h.scrollBy({ left: -de, behavior: "smooth" }) }, ae.onclick = function () { h.scrollBy({ left: de, behavior: "smooth" }) } }, init() { this.createIndexItem_Projects(), this.createIndexItem_Posts() }, start() { this.handleEvent(), this.handleEventAuto(), this.init() } } })().start() } fetch(myRequest).then(e => e.text()).then(e => { website.innerHTML = e }).then(function () { initWebsite() });